---
import Layout from 'src/layouts/Layout.astro';
---

<Layout title="CloudFlare Integration - ASSQ-CloudFlare Stack">

	<main>
		<!-- Hero Section -->
		<section class="bg-gradient-to-b from-orange-50 to-white dark:from-orange-900/20 dark:to-gray-800 py-16 lg:py-24">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<div class="text-center">
					<h1 class="text-4xl lg:text-5xl font-bold mb-6 bg-gradient-to-r from-orange-600 to-blue-600 bg-clip-text text-transparent">
						CloudFlare Integration
					</h1>
					<p class="text-xl text-gray-600 dark:text-gray-300 max-w-3xl mx-auto">
						Learn how to deploy and integrate your ASSQ stack with CloudFlare's edge computing platform for maximum performance and global reach.
					</p>
				</div>
			</div>
		</section>

		<!-- CloudFlare Services Section -->
		<section class="py-16 lg:py-24">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<h2 class="text-3xl font-bold text-center mb-12">CloudFlare Services</h2>
			
			<div class="space-y-8">
				<div class="bg-orange-50 dark:bg-orange-900/20 rounded-lg p-6 border border-orange-200 dark:border-orange-800">
					<p class="text-orange-800 dark:text-orange-200">
						<strong>Note:</strong> To use these features, you'll need to configure your <code class="bg-orange-100 dark:bg-orange-800/50 px-2 py-1 rounded">wrangler.toml</code> file with the appropriate bindings.
					</p>
				</div>

				<div class="grid grid-cols-1 md:grid-cols-2 gap-6">
					<div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
						<h2 class="text-2xl font-semibold mb-4 text-blue-600 dark:text-blue-400">D1 Database</h2>
						<p class="text-gray-600 dark:text-gray-300 mb-4">
							Cloudflare's serverless SQL database, perfect for relational data.
						</p>
						<pre class="bg-gray-900 text-gray-100 p-3 rounded text-sm overflow-x-auto">
<code>{`// In your API route
export async function GET({ locals }) {
  const { DB } = locals.runtime.env;
  const result = await DB.prepare(
    "SELECT * FROM users WHERE id = ?"
  ).bind(userId).first();
  return new Response(JSON.stringify(result));
}`}</code>
						</pre>
					</div>

					<div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
						<h2 class="text-2xl font-semibold mb-4 text-green-600 dark:text-green-400">KV Storage</h2>
						<p class="text-gray-600 dark:text-gray-300 mb-4">
							Key-value storage for caching and session data.
						</p>
						<pre class="bg-gray-900 text-gray-100 p-3 rounded text-sm overflow-x-auto">
<code>{`// In your API route
export async function GET({ locals }) {
  const { KV } = locals.runtime.env;
  const value = await KV.get("myKey");
  await KV.put("myKey", "myValue", {
    expirationTtl: 60 * 60 * 24
  });
  return new Response(value);
}`}</code>
						</pre>
					</div>

					<div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
						<h2 class="text-2xl font-semibold mb-4 text-purple-600 dark:text-purple-400">Durable Objects</h2>
						<p class="text-gray-600 dark:text-gray-300 mb-4">
							Stateful serverless computing for real-time applications.
						</p>
						<pre class="bg-gray-900 text-gray-100 p-3 rounded text-sm overflow-x-auto">
<code>{`// Define in your worker
export class Counter {
  constructor(state, env) {
    this.state = state;
  }
  
  async fetch(request) {
    const count = await this.state
      .storage.get("count") || 0;
    return new Response(count);
  }
}`}</code>
						</pre>
					</div>

					<div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-6">
						<h2 class="text-2xl font-semibold mb-4 text-red-600 dark:text-red-400">R2 Storage</h2>
						<p class="text-gray-600 dark:text-gray-300 mb-4">
							Object storage for files and media, S3-compatible.
						</p>
						<pre class="bg-gray-900 text-gray-100 p-3 rounded text-sm overflow-x-auto">
<code>{`// In your API route
export async function POST({ locals, request }) {
  const { R2 } = locals.runtime.env;
  const file = await request.arrayBuffer();
  await R2.put("file.pdf", file);
  return new Response("Uploaded!");
}`}</code>
						</pre>
					</div>
				</div>

				<!-- D1 Database Interactive Demo -->
				<div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8">
					<h2 class="text-2xl font-semibold mb-4 text-blue-600 dark:text-blue-400">
						ðŸ”¥ D1 Database - Live Demo
					</h2>
					<p class="text-gray-600 dark:text-gray-300 mb-6">
						Interactive demonstration of D1 database connectivity. Data is fetched in real-time from our CloudFlare D1 database.
					</p>
					
					<div class="overflow-x-auto">
						<div id="d1-table-container" class="min-h-[200px]">
							<div class="flex items-center justify-center py-8">
								<div class="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
								<span class="ml-3 text-gray-600 dark:text-gray-300">Loading D1 data...</span>
							</div>
						</div>
					</div>
					
					<div class="mt-6 p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-200 dark:border-blue-800">
						<p class="text-blue-800 dark:text-blue-200 text-sm">
							<strong>API Endpoint:</strong> <code class="bg-blue-100 dark:bg-blue-800/50 px-2 py-1 rounded">/api/test</code> 
							- This table fetches data directly from our D1 database via REST API.
						</p>
					</div>
				</div>

				<div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8">
					<h2 class="text-2xl font-semibold mb-4">Setting Up Bindings</h2>
					<p class="text-gray-600 dark:text-gray-300 mb-4">
						Add these bindings to your <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">wrangler.toml</code>:
					</p>
					<pre class="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto">
<code>{`name = "my-astro-app"
compatibility_date = "2024-01-01"

# D1 Database
[[d1_databases]]
binding = "DB"
database_name = "my-database"
database_id = "your-database-id"

# KV Namespace
[[kv_namespaces]]
binding = "KV"
id = "your-kv-namespace-id"

# Durable Objects
[[durable_objects.bindings]]
name = "COUNTER"
class_name = "Counter"

# R2 Bucket
[[r2_buckets]]
binding = "R2"
bucket_name = "my-bucket"`}</code>
					</pre>
				</div>

				<div class="bg-white dark:bg-gray-800 rounded-lg shadow-lg p-8">
					<h2 class="text-2xl font-semibold mb-4">API Routes</h2>
					<p class="text-gray-600 dark:text-gray-300 mb-4">
						Create API endpoints in <code class="bg-gray-200 dark:bg-gray-700 px-2 py-1 rounded">src/pages/api/</code>:
					</p>
					<pre class="bg-gray-900 text-gray-100 p-4 rounded-lg overflow-x-auto">
<code>{`// src/pages/api/users.json.ts
export async function GET({ locals }) {
  const { DB } = locals.runtime.env;
  
  const { results } = await DB.prepare(
    "SELECT * FROM users LIMIT 10"
  ).all();
  
  return new Response(
    JSON.stringify({ users: results }),
    {
      headers: {
        "Content-Type": "application/json"
      }
    }
  );
}`}</code>
					</pre>
				</div>
			</div>
		</section>

		<!-- Getting Started -->
		<section class="py-16 lg:py-24 bg-gray-50 dark:bg-gray-900">
			<div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
				<h2 class="text-3xl font-bold mb-6">
					Ready to Deploy?
				</h2>
				<p class="text-lg text-gray-600 dark:text-gray-300 mb-8">
					Get started with CloudFlare integration and deploy your ASSQ stack to the edge.
				</p>
				<div class="flex flex-col sm:flex-row gap-4 justify-center">
					<a href="https://pages.cloudflare.com" target="_blank" rel="noopener noreferrer" class="px-8 py-4 bg-orange-600 text-white text-lg rounded-lg hover:bg-orange-700 transition-colors shadow-lg hover:shadow-xl">
						CloudFlare Pages
					</a>
					<a href="/docs" class="px-8 py-4 bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 text-lg rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors shadow-lg hover:shadow-xl border border-gray-200 dark:border-gray-700">
						Documentation
					</a>
				</div>
			</div>
		</section>
	</main>

	<footer class="border-t border-gray-200 dark:border-gray-800 py-12">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<div class="text-center text-gray-600 dark:text-gray-400">
				<p>&copy; 2025 ASSQ-CloudFlare Stack Template. Open source and ready to use.</p>
			</div>
		</div>
	</footer>
</Layout>

<script>
	// D1 Table Functionality
	async function loadD1Data() {
		const container = document.getElementById('d1-table-container');
		if (!container) return;

		try {
			const response = await fetch('/api/test');
			const data = await response.json();
			
			if (Array.isArray(data) && data.length > 0) {
				// Create table HTML
				const tableHTML = `
					<table class="w-full bg-white dark:bg-gray-800 rounded-lg overflow-hidden shadow-sm">
						<thead class="bg-blue-50 dark:bg-blue-900/20">
							<tr>
								<th class="px-6 py-3 text-left text-xs font-medium text-blue-800 dark:text-blue-200 uppercase tracking-wider">
									ID
								</th>
								<th class="px-6 py-3 text-left text-xs font-medium text-blue-800 dark:text-blue-200 uppercase tracking-wider">
									Name
								</th>
								<th class="px-6 py-3 text-left text-xs font-medium text-blue-800 dark:text-blue-200 uppercase tracking-wider">
									Surname
								</th>
							</tr>
						</thead>
						<tbody class="divide-y divide-gray-200 dark:divide-gray-700">
							${data.map(row => `
								<tr class="hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors">
									<td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-gray-100">
										${row.id}
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
										${row.name}
									</td>
									<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
										${row.surname}
									</td>
								</tr>
							`).join('')}
						</tbody>
					</table>
				`;
				
				container.innerHTML = tableHTML;
			} else {
				// Show empty state
				container.innerHTML = `
					<div class="text-center py-8">
						<div class="text-gray-400 dark:text-gray-500 mb-2">
							<svg class="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
							</svg>
						</div>
						<p class="text-gray-500 dark:text-gray-400">No data found in D1 database</p>
						<p class="text-sm text-gray-400 dark:text-gray-500 mt-1">The database appears to be empty or not properly configured.</p>
					</div>
				`;
			}
		} catch (error) {
			console.error('Error loading D1 data:', error);
			
			// Show error state
			container.innerHTML = `
				<div class="text-center py-8">
					<div class="text-red-400 mb-2">
						<svg class="mx-auto h-12 w-12" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
						</svg>
					</div>
					<p class="text-red-600 dark:text-red-400 font-medium">Failed to load D1 data</p>
					<p class="text-sm text-gray-500 dark:text-gray-400 mt-1">
						${error.message || 'Unable to connect to the database'}
					</p>
					<button 
						onclick="loadD1Data()" 
						class="mt-3 px-4 py-2 bg-blue-600 text-white text-sm rounded hover:bg-blue-700 transition-colors"
					>
						Retry
					</button>
				</div>
			`;
		}
	}

	// Load data when page loads
	document.addEventListener('DOMContentLoaded', loadD1Data);
	
	// Make loadD1Data globally available for retry button
	window.loadD1Data = loadD1Data;
</script>